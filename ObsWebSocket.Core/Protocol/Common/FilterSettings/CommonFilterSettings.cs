// Semi-Autogenerated Code
// Records representing default settings for common OBS filters.
// Generated based on GetSourceFilterDefaultSettings output, assuming common types.
// Properties are nullable to handle potential omissions in defaults or for partial updates.

using System.Text.Json.Serialization;

namespace ObsWebSocket.Core.Protocol.Common.FilterSettings;

// Note: Property names MUST match OBS internal settings keys via JsonPropertyName

/// <summary>Settings for the 'mask_filter' or 'mask_filter_v2' filter (Image Mask/Blend).</summary>
/// <remarks>Note: v1 uses opacity 0-100, v2 uses 0.0-1.0.</remarks>
public sealed record ImageMaskBlendFilterSettings(
    [property: JsonPropertyName("type")] string? Type = null, // e.g., "mask_color_filter.effect", "mask_alpha_filter.effect", "blend_multiply_filter.effect" etc.
    [property: JsonPropertyName("color")] long? Color = null, // Integer representation of color (ARGB?)
    [property: JsonPropertyName("opacity")] double? Opacity = null, // V2 uses 0.0-1.0, V1 used 0-100 (handle conversion if necessary)
    [property: JsonPropertyName("image_path")] string? ImagePath = null, // Path to the mask/blend image
    [property: JsonPropertyName("stretch_image")] bool? StretchImage = null,
    [property: JsonPropertyName("subtractive")] bool? Subtractive = null // For alpha mask type
);

/// <summary>Settings for the 'crop_filter' filter.</summary>
public sealed record CropPadFilterSettings(
    [property: JsonPropertyName("relative")] bool? Relative = null,
    [property: JsonPropertyName("top")] double? Top = null,
    [property: JsonPropertyName("bottom")] double? Bottom = null,
    [property: JsonPropertyName("left")] double? Left = null,
    [property: JsonPropertyName("right")] double? Right = null,
    [property: JsonPropertyName("width")] double? Width = null, // For absolute positioning
    [property: JsonPropertyName("height")] double? Height = null // For absolute positioning
);

/// <summary>Settings for the 'gain_filter' filter.</summary>
public sealed record GainFilterSettings([property: JsonPropertyName("db")] double? Db = null);

/// <summary>Settings for the 'basic_eq_filter' (3-Band EQ) filter.</summary>
public sealed record BasicEqFilterSettings(
    [property: JsonPropertyName("high")] double? High = null,
    [property: JsonPropertyName("low")] double? Low = null,
    [property: JsonPropertyName("mid")] double? Mid = null
);

/// <summary>Settings for the 'hdr_tonemap_filter' filter.</summary>
public sealed record HdrTonemapFilterSettings(
    [property: JsonPropertyName("hdr_input_maximum_nits")] double? HdrInputMaximumNits = null,
    [property: JsonPropertyName("hdr_output_maximum_nits")] double? HdrOutputMaximumNits = null,
    [property: JsonPropertyName("sdr_input_maximum_nits")] double? SdrInputMaximumNits = null,
    [property: JsonPropertyName("sdr_output_maximum_nits")] double? SdrOutputMaximumNits = null,
    [property: JsonPropertyName("sdr_white_level_nits")] double? SdrWhiteLevelNits = null,
    [property: JsonPropertyName("transform")] long? Transform = null // Likely an enum index (0, 1, etc.)
);

/// <summary>Settings for the 'color_filter' or 'color_filter_v2' (Color Correction) filter.</summary>
/// <remarks>Note: v1 uses opacity 0-100, v2 uses 0.0-1.0. v2 adds color_add/multiply.</remarks>
public sealed record ColorCorrectionFilterSettings(
    [property: JsonPropertyName("brightness")] double? Brightness = null,
    [property: JsonPropertyName("contrast")] double? Contrast = null,
    [property: JsonPropertyName("gamma")] double? Gamma = null,
    [property: JsonPropertyName("hue_shift")] double? HueShift = null,
    [property: JsonPropertyName("opacity")] double? Opacity = null, // V2 uses 0.0-1.0, V1 used 0-100
    [property: JsonPropertyName("saturation")] double? Saturation = null,
    // V1 Specific (or maybe shared, depends on exact OBS version behavior)
    [property: JsonPropertyName("color")] long? Color = null, // Integer representation (e.g., white 16777215)
    // V2 Specific
    [property: JsonPropertyName("color_add")] long? ColorAdd = null,
    [property: JsonPropertyName("color_multiply")] long? ColorMultiply = null
);

/// <summary>Settings for the 'scale_filter' filter.</summary>
public sealed record ScaleFilterSettings(
    [property: JsonPropertyName("resolution")] string? Resolution = null, // e.g., "None", "1920x1080"
    [property: JsonPropertyName("sampling")] string? Sampling = null, // e.g., "point", "bilinear", "bicubic", "lanczos"
    [property: JsonPropertyName("undistort")] bool? Undistort = null // For 360 equirectangular scaling
);

/// <summary>Settings for the 'scroll_filter' filter.</summary>
public sealed record ScrollFilterSettings(
    [property: JsonPropertyName("speed_x")] double? SpeedX = null,
    [property: JsonPropertyName("speed_y")] double? SpeedY = null,
    [property: JsonPropertyName("loop")] bool? Loop = null,
    [property: JsonPropertyName("limit_size")] bool? LimitSize = null, // Renamed from 'limit_cxcy' in some versions? Check OBS UI/GetSettings
    [property: JsonPropertyName("cx")] double? Width = null, // Width limit if limit_size is true
    [property: JsonPropertyName("cy")] double? Height = null // Height limit if limit_size is true
);

// Note: 'gpu_delay' has no default settings in the provided JSON ({})

/// <summary>Settings for the 'color_key_filter' or 'color_key_filter_v2' filter.</summary>
/// <remarks>Note: v1 uses opacity 0-100, v2 uses 0.0-1.0.</remarks>
public sealed record ColorKeyFilterSettings(
    [property: JsonPropertyName("key_color_type")] string? KeyColorType = null, // e.g., "green", "blue", "magenta", "custom"
    [property: JsonPropertyName("key_color")] long? KeyColor = null, // Integer color if type is custom
    [property: JsonPropertyName("similarity")] double? Similarity = null, // Range 1-1000 usually
    [property: JsonPropertyName("smoothness")] double? Smoothness = null, // Range 1-1000 usually
    [property: JsonPropertyName("brightness")] double? Brightness = null,
    [property: JsonPropertyName("contrast")] double? Contrast = null,
    [property: JsonPropertyName("gamma")] double? Gamma = null,
    [property: JsonPropertyName("opacity")] double? Opacity = null // V2 uses 0.0-1.0, V1 used 0-100
);

/// <summary>Settings for the 'clut_filter' (Apply LUT) filter.</summary>
public sealed record LutFilterSettings(
    [property: JsonPropertyName("image_path")] string? ImagePath = null, // Path to the LUT file
    [property: JsonPropertyName("clut_amount")] double? ClutAmount = null, // Intensity 0.0-1.0
    [property: JsonPropertyName("passthrough_alpha")] bool? PassthroughAlpha = null
);

/// <summary>Settings for the 'sharpness_filter' or 'sharpness_filter_v2' filter.</summary>
public sealed record SharpnessFilterSettings(
    [property: JsonPropertyName("sharpness")] double? Sharpness = null // Range 0.0-1.0 usually
);

/// <summary>Settings for the 'chroma_key_filter' or 'chroma_key_filter_v2' filter.</summary>
/// <remarks>Note: v1 uses opacity 0-100, v2 uses 0.0-1.0.</remarks>
public sealed record ChromaKeyFilterSettings(
    [property: JsonPropertyName("key_color_type")] string? KeyColorType = null, // e.g., "green", "blue", "magenta", "custom"
    [property: JsonPropertyName("key_color")] long? KeyColor = null, // Integer color if type is custom
    [property: JsonPropertyName("similarity")] double? Similarity = null, // Range 1-1000 usually
    [property: JsonPropertyName("smoothness")] double? Smoothness = null, // Range 1-1000 usually
    [property: JsonPropertyName("spill")] double? Spill = null, // Key color spill reduction, Range 1-1000 usually
    [property: JsonPropertyName("brightness")] double? Brightness = null,
    [property: JsonPropertyName("contrast")] double? Contrast = null,
    [property: JsonPropertyName("gamma")] double? Gamma = null,
    [property: JsonPropertyName("opacity")] double? Opacity = null // V2 uses 0.0-1.0, V1 used 0-100
);

// Note: 'async_delay_filter' has no default settings ({})

/// <summary>Settings for the 'noise_suppress_filter' or 'noise_suppress_filter_v2' filter.</summary>
public sealed record NoiseSuppressionFilterSettings(
    [property: JsonPropertyName("method")] string? Method = null, // e.g., "speex", "rnnoise"
    [property: JsonPropertyName("suppress_level")] double? SuppressLevel = null, // e.g., -30 dB
    [property: JsonPropertyName("intensity")] double? Intensity = null // Only for v2, 0.0-1.0? Check OBS
);

// Note: 'invert_polarity_filter' has no default settings ({})

/// <summary>Settings for the 'noise_gate_filter' filter.</summary>
public sealed record NoiseGateFilterSettings(
    [property: JsonPropertyName("close_threshold")] double? CloseThreshold = null, // dB
    [property: JsonPropertyName("open_threshold")] double? OpenThreshold = null, // dB
    [property: JsonPropertyName("attack_time")] double? AttackTime = null, // ms
    [property: JsonPropertyName("hold_time")] double? HoldTime = null, // ms
    [property: JsonPropertyName("release_time")] double? ReleaseTime = null // ms
);

/// <summary>Settings for the 'compressor_filter' filter.</summary>
public sealed record CompressorFilterSettings(
    [property: JsonPropertyName("threshold")] double? Threshold = null, // dB
    [property: JsonPropertyName("ratio")] double? Ratio = null, // e.g., 10.0 (for 10:1)
    [property: JsonPropertyName("attack_time")] double? AttackTime = null, // ms
    [property: JsonPropertyName("release_time")] double? ReleaseTime = null, // ms
    [property: JsonPropertyName("output_gain")] double? OutputGain = null, // dB
    [property: JsonPropertyName("sidechain_source")] string? SidechainSource = null // Source name or "none"
);

/// <summary>Settings for the 'limiter_filter' filter.</summary>
public sealed record LimiterFilterSettings(
    [property: JsonPropertyName("threshold")] double? Threshold = null, // dB
    [property: JsonPropertyName("release_time")] double? ReleaseTime = null // ms
);

/// <summary>Settings for the 'expander_filter' filter.</summary>
public sealed record ExpanderFilterSettings(
    [property: JsonPropertyName("presets")] string? Presets = null, // e.g., "expander", "gate"
    [property: JsonPropertyName("threshold")] double? Threshold = null, // dB
    [property: JsonPropertyName("ratio")] double? Ratio = null, // e.g., 2.0 (for 2:1)
    [property: JsonPropertyName("attack_time")] double? AttackTime = null, // ms
    [property: JsonPropertyName("release_time")] double? ReleaseTime = null, // ms
    [property: JsonPropertyName("output_gain")] double? OutputGain = null, // dB
    [property: JsonPropertyName("detector")] string? Detector = null // e.g., "RMS", "Peak"
)
{
    /// <summary>Known values for the Detector setting.</summary>
    public static class DetectorValues
    {
        /// <summary>
        /// RMS (Root Mean Square) is a statistical measure of the magnitude of a varying quantity.
        /// </summary>
        public const string Rms = "RMS";

        /// <summary>
        /// Peak refers to the maximum instantaneous value of a signal.
        /// </summary>
        public const string Peak = "Peak";
    }

    /// <summary>Known values for the Presets setting.</summary>
    public static class PresetsValues
    {
        /// <summary>
        /// Expander is a dynamic range compressor that reduces the level of audio signals above a certain threshold.
        /// </summary>
        public const string Expander = "expander";

        /// <summary>
        /// Gate is a type of dynamic range processor that reduces the level of audio signals below a certain threshold.
        /// </summary>
        public const string Gate = "gate";
    }
}

/// <summary>Settings for the 'upward_compressor_filter' filter.</summary>
public sealed record UpwardCompressorFilterSettings(
    [property: JsonPropertyName("threshold")] double? Threshold = null, // dB
    [property: JsonPropertyName("ratio")] double? Ratio = null, // e.g., 0.5 (for 1:2 upward compression)
    [property: JsonPropertyName("knee_width")] double? KneeWidth = null, // dB
    [property: JsonPropertyName("attack_time")] double? AttackTime = null, // ms
    [property: JsonPropertyName("release_time")] double? ReleaseTime = null, // ms
    [property: JsonPropertyName("output_gain")] double? OutputGain = null, // dB
    [property: JsonPropertyName("detector")] string? Detector = null // e.g., "RMS", "Peak"
)
{
    /// <summary>Known values for the Detector setting.</summary>
    public static class DetectorValues
    {
        /// <summary>
        /// RMS (Root Mean Square) is a statistical measure of the magnitude of a varying quantity.
        /// </summary>
        public const string Rms = "RMS";

        /// <summary>
        /// Peak refers to the maximum instantaneous value of a signal.
        /// </summary>
        public const string Peak = "Peak";
    }
}

/// <summary>Settings for the 'luma_key_filter' or 'luma_key_filter_v2' filter.</summary>
public sealed record LumaKeyFilterSettings(
    [property: JsonPropertyName("luma_min")] double? LumaMin = null, // Range 0.0-1.0
    [property: JsonPropertyName("luma_max")] double? LumaMax = null, // Range 0.0-1.0
    [property: JsonPropertyName("luma_min_smooth")] double? LumaMinSmooth = null, // Range 0.0-1.0
    [property: JsonPropertyName("luma_max_smooth")] double? LumaMaxSmooth = null // Range 0.0-1.0
);

// Note: 'vst_filter' has no default settings ({}) - settings are specific to the loaded VST plugin.
